import re
import os
import pytest
from returns.result import Success

from test_support import with_remarks, snapshot, snapshot_test_pdf
from parsita import ParserContext, lit, reg, rep, Parser, ParseError, opt, until, any1

r"""
 _____  _____  ______ 
|  __ \|  __ \|  ____|
| |__) | |  | | |__   
|  ___/| |  | |  __|  
| |    | |__| | |     
|_|    |_____/|_|     
"""


@with_remarks("tests/in/pdf_with_multiple_added_pages")
def test_pdf_with_inserted_pages(snapshot):
    snapshot_test_pdf("pdf_longer _remarks.pdf", snapshot)


@with_remarks("tests/in/highlighter-test")
def test_pdf_with_glyphrange_highlights(snapshot):
    snapshot_test_pdf("docsfordevelopers _remarks.pdf", snapshot)


@with_remarks("demo/on-computable-numbers/xochitl")
def test_can_process_demo_with_default_args():
    assert os.path.isfile(
        "tests/out/1936 On Computable Numbers, with an Application to the Entscheidungsproblem - A. M. Turing _remarks.pdf")


@with_remarks("tests/in/v2_notebook_complex")
def test_can_handle_drawing_with_many_scribbles():
    assert os.path.isfile("tests/out/Gosper _remarks.pdf")


@with_remarks("tests/in/v2_book_with_ann")
def test_can_handle_book():
    assert os.path.isfile("tests/out/Gosper _remarks.pdf")


r"""
 __  __            _       _                     
|  \/  |          | |     | |                    
| \  / | __ _ _ __| | ____| | _____      ___ __  
| |\/| |/ _` | '__| |/ / _` |/ _ \ \ /\ / / '_ \ 
| |  | | (_| | |  |   < (_| | (_) \ V  V /| | | |
|_|  |_|\__,_|_|  |_|\_\__,_|\___/ \_/\_/ |_| |_|
"""


def assert_parser_succeeds(parser: Parser, input_string: str):
    result = parser.parse(input_string)
    assert type(result) is Success, result.failure()


any_char = reg(r'.') | lit("\n")
whatever = rep(any_char)
newline = lit('\n')

to_newline = reg(r'[^\n]+')

obsidian_tag = reg(r"#([a-z/])+")
yaml_property = lambda k, v: k >> lit(":\n") >> v
frontmatter =(
    lit('---') << newline >>
    yaml_property(lit("tags"), lit("- ") >> lit("'") >> obsidian_tag >> lit("'")) >> rep(newline) >>
    lit("---") >> whatever
)
autogeneration_warning = lit("""> [!WARNING] **Do not modify** this file
> This file is automatically generated by Scrybble and will be overwritten whenever this file in synchronized.
> Treat it as a reference.""")
h = lambda n, c: lit(n + " ") & c
rmdoc_title = h("#", to_newline)
has_warning = (until(autogeneration_warning) << autogeneration_warning >> whatever)


# scrybble_obsidian_format = frontmatter

@with_remarks("tests/in/highlighter-test")
@pytest.mark.markdown
def test_generated_markdown_has_autogeneration_warning():
    with open("tests/out/docsfordevelopers _obsidian.md") as f:
        assert_parser_succeeds(has_warning, f.read())


@with_remarks("tests/in/v3_markdown_tags")
@with_remarks("tests/in/highlighter-test")
@pytest.mark.markdown
def test_generated_markdown_heading_is_positioned_correctly():
    with open("tests/out/docsfordevelopers _obsidian.md") as f:
        assert rmdoc_title.parse(f.read())
    with open("tests/out/tags test _obsidian.md") as f:
        content = f.read()
        # Make sure that the title is on its own line
        match = re.search(r"^# tags test$", content, re.MULTILINE)
        assert match, "Title '# tags test' not found on its own line in the file"


@with_remarks("tests/in/v3_markdown_tags")
@pytest.mark.markdown
def test_yaml_frontmatter_is_valid():
    with open('tests/out/tags test _obsidian.md') as f:
        content = f.read()
        assert_parser_succeeds(frontmatter, content)

# @with_remarks("tests/in/v3_typed_text")
# def test_something():
#     raise Exception("hi")
